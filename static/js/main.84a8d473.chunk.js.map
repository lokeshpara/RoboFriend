{"version":3,"sources":["component/card.js","component/cardList.js","component/searchBox.js","component/scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","username","id","className","alt","src","CarList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","robot","fetch","then","response","json","users","this","filteredRobot","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAgBeA,EAdF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAKC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,SAASC,EAAQ,EAARA,GAClC,OACC,yBAAKC,UAAU,wDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,eACrB,6BACC,qCAAWH,GACX,yCAAeE,GACf,qCAAWD,MCcAM,EApBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdH,KAAMQ,EAAOG,GAAGX,KAChBE,SAAUM,EAAOG,GAAGT,SACpBD,MAAOO,EAAOG,GAAGV,aCCTY,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKV,UAAU,OACf,2BACCA,UAAU,kCACVW,KAAK,OACLC,YAAY,QACZC,SAAUH,MCAEI,G,MAPA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAkBC,OAAO,UACjEJ,EAAMK,YCuCKC,E,kDArCd,aAAe,IAAD,8BACb,gBAaFC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbxC,EAAKC,MAAQ,CACZC,MAAM,GACNJ,YAAY,IAJA,E,gEAQM,IAAD,OACnBK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,MAAQK,S,+BAO5B,IAAD,EACoBC,KAAKP,MAA1BC,EADC,EACDA,MAAMJ,EADL,EACKA,YACPW,EAAgBP,EAAMQ,QAAO,SAAAR,GACnC,OAAOA,EAAMjC,KAAK0C,cAAcC,SAASd,EAAYa,kBAErD,OAAQT,EAAMW,OAGb,yBAAKxC,UAAU,MACf,2CACA,kBAAC,EAAD,CAAWU,aAAcyB,KAAKb,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlB,OAAQgC,IADnB,OALD,wBAAIpC,UAAU,MAAd,e,GAzBgByC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.84a8d473.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({name,email,username,id}) => {\r\n\treturn(\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow- 5\">\r\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?200x200\"`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>Name: {name}</h2>\r\n\t\t\t\t<h4>UserName: {username}</h4>\r\n\t\t\t\t<p>email: {email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t)\r\n}\r\n\r\nexport default Card","import React from \"react\";\r\nimport Card from \"./card\";\r\n\r\nconst CarList = ({robots}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,i) => {\r\n\t\t\t\t\treturn( \r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\tusername={robots[i].username}\r\n\t\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t\t)\r\n\t} \r\n\r\nexport default CarList;","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn(\r\n\t\t<div className=\"pa2\">\r\n\t\t<input\r\n\t\t className=\"pa3 ba b-green bg-lightest-blue\"\r\n\t\t type=\"text\" \r\n\t\t placeholder=\"Robot\"\r\n\t\t onChange={searchChange}\r\n\t\t />\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY: \"scroll\", border: \"1px solid black\",height:\"900px\"}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default Scroll;\r\n","import React, {Component} from \"react\";\r\nimport CardList from \"../component/cardList\";\r\nimport SearchBox from \"../component/searchBox.js\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../component/scroll.js\";\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobot:[],\r\n\t\t\tsearchfield:\"\"\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidMount() {\r\n\tfetch(`https://jsonplaceholder.typicode.com/users`)\r\n\t.then(response => response.json())\r\n\t.then(users => this.setState({robot : users}))\r\n}\r\n\r\nonSearchChange = (event) => {\r\n\tthis.setState({searchfield: event.target.value});\r\n};\r\n\r\n\trender() {\r\n\t\tconst {robot,searchfield} = this.state;\r\n\t\tconst filteredRobot = robot.filter(robot => {\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t});\r\n\t\treturn !robot.length?\r\n\t\t<h1 className=\"tc\">Loading</h1> :\r\n\t\t(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t<h1>RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t<Scroll>\r\n\t\t\t\t<CardList robots={filteredRobot}/>\\\r\n\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App/>\r\n\t</React.StrictMode>,\r\n\t document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}